;;;; Chun Tian (binghe) <binghe.lisp@gmail.com>;;;; Resolves issue #1:;; https://github.com/binghe/rmcl/issues/1;;;; sometimes this function can be called with :size keyword as a list, this patch has enabled the previous;; disabled code for handling such list-based :size keywords.;;(in-package :ccl)(let ((*WARN-IF-REDEFINE-KERNEL* nil)      (*warn-if-redefine* nil))(defun %save-application-internal (listener filename &key                                            (init-file nil init-file-p)                                            toplevel-function  ;????                                                                                         ;hide-listener                                             menubar                                            error-handler ; meaningless unless application-class or *application* not lisp-development..                                            application-class                                            creator                                             excise-compiler                                                                                        resources                                            (clear-clos-caches t)                                            memory-options                                            size)    (when (and application-class (neq  (class-of *application*)                                     (if (symbolp application-class)                                       (find-class application-class)                                       application-class)))    (setq *application* (make-instance application-class)))  (when (not creator)(setq creator (application-file-creator *application*)))  (when (not toplevel-function)    (setq toplevel-function           #'(lambda ()              (toplevel-function *application*                                  (if init-file-p                                   init-file                                   (application-init-file *application*))))))  (when error-handler    (require :hide-listener-support)    (funcall 'make-application-error-handler *application* error-handler))  (when menubar (set-menubar menubar))  (when size    (if (integerp size)      (setq size (list size size)))    (unless (and (listp size)                  (= (length size) 2)                  (integerp (car size))                                     (integerp (cadr size))                 (>= (car size) (cadr size) 0))      (error "Invalid ~S argument : ~S" :size size)))  (when (fixnump size)     (if (< size #.(ash 1 32)) ;; its size in kb      (setq *max-heap-size* size)      (error "Invalid ~S argument : ~S" :size size)))  (setq resources (append resources *patched-resources*))  (let* ((nv (new-version-resource)))    (when nv (push nv resources)))   ;; try again for OSX  (let ((cfrg (new-cfrg-resource)))    (when cfrg (push cfrg resources)))  (let* ((lsiz (process-lsiz-options memory-options)))    (when lsiz (push lsiz resources)))  (prepare-to-quit listener)  (setq *recent-files* nil)  (if clear-clos-caches (clear-clos-caches))  (if excise-compiler (excise-compiler))  (save-image (let ((vrefnum (require-type                              (volume-number (directory-namestring filename))                              'fixnum))                    (refnum (open-dumplisp-file filename creator size resources)))                #'(lambda () (%save-application vrefnum #xc0 refnum)))              ;This is a bit bogus.  Specifying an init-file arg means requesting              ;the usual lisp startup actions (load init file, print greeting and              ;run *lisp-startup-functions*).  Really should have some more              ;explicit arguments for specifying this stuff.              #'(lambda ()                  (%set-toplevel #'event-processing-loop)                  (when toplevel-function                    (if *single-process-p*                      (funcall toplevel-function)                      (process-run-function "Startup" toplevel-function))))))
) ; end redefine